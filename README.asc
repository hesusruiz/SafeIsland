= SafeIsland
:encoding: utf-8
:lang: en
:toc: left
:author: Jesus Ruiz
:email: hesus.ruiz@gmail.com
:revnumber: 0.2
:revdate: 19-12-2020
:numbered:
:imagesdir: images
:icons: font
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
:tn: Alastria T Network NG
:3dots: ...

(Version: {revnumber}, Version Date: {revdate})

This is a generic digital credential system which is designed to be secure, privacy-preserving, scalable and robust.

The main components ar ethe following:


---
image::RapidTest_Architecture.png[]
---


== The meaning of Decentralization

Since the appearance of the blockchain, the word *decentralized* has appeared in many places as a property that has to be the objective to pursue in any area of human endeavour if we are to improve human lives. However, there has never been a precise and concrete definition of decentralization, and even less a set of KPIs (Key Performance Indicators) which could be used to objectively assess the amount of decentralization that a system possesses.

This is a very difficult problem, so in this document we take the pragmatic approach of defining decentralization not as an end objective per se, but as one of several mechanisms that can be used to improve some more important and tangible properties, especifically of a blockchain network.

=== The Public-Permissioned Blockchain Manifesto

A Public-Permissioned blockchain network combines permissioning with a decentralized governance model, allowing the blockchain to be managed as a Common Good. Very briefly, this means that the network is not controlled by any single company or group of companies, or even by a single government, and at the same time the network complies with all relevant regulations and it is efficient and sustainable.

There is not a single way to achieve these objectives, but the {tn} implements a specific governance model which arises from considering the blockchain network as a Common-Pool Resource (CPR) like the ones described by Elinor Ostrom, Nobel Prize in Economics in 2009 <<Ostrom1990>>. Ostrom focused on how communities manage to successfully govern communal resources, avoiding the “The tragedy of the commons” as described by Hardin.

A blockchain network can be considered as a technical infrastructure with scarce resources, given the inherent scaling problems of the technology. To be considered a common good, a Public-Permissioned blockchain network should comply with the following principles:

1. *Non-discriminatory and open access and usage*: Everybody has the right to join and use the infrastructure according to the access rules, which are fair, transparent and the same for everybody. In an analogy with the public roads of a country, everybody can drive a car, as far as they hold a valid driver’s license, and the car displays its plate.

2. *Open participation in governance*: Everybody has the right to participate in the construction, operation, provision, and governance of the infrastructure. The network should be inclusive, open to participation of any entity independent of size or sector of activity. Specifically, anybody can participate in the execution of the consensus algorithm used for the selection of transactions which go into the blocks.

3. *Inclusive participation in governance*: Influence in governance of the infrastructure should be independent of the size, wealth, sector of activity or any other factor. Specifically, voting power in the consensus algorithm should be independent of computing power available (PoW), assets available (PoS), or any other where the rich or powerful dominates over others. We could say that the consensus algorithm should be “as democratic as possible”, where one entity represents one vote.

4. *Juridical persons are never anonymous*: As in the real economy, the identities of juridical persons in the blockchain are public and well-known. In addition, even though their transactional activity may be private with respect to other actors (e.g. competitors), it is never private with respect to regulators or other controlling and law enforcement bodies (e.g. tax agencies or industry watchdogs).

5. *Consumer protection is ensured*: Normally natural persons do not participate directly in the blockchain because they do not run or operate a full node. Instead, they typically participate indirectly and so they must somehow trust some other actors. In any case, independently of whether participation of a natural person is direct or indirect, the system must always ensure that all applicable regulations on consumer protection apply, including personal data protection regulations.

The first principle specifies that anybody can use the blockchain. However, in {tn} first-hand participation implies installing and operating a server-class machine (the blockchain node), and this is not feasible for most natural persons. In addition, given the nature of the blockchain technology (in particular with respect to personal data protection and the consequences of losing private keys), it is not a good idea to allow natural persons to access ditectly the blockchain infrastructure.

Those are some of the reasons why in {tn} only juridical persons are allowed to install and operate a blockchain node and connect it to the rest of the network. This is in addition to the condition that the entity has to be also a member of the Alastria association, as it is described later in this document.

The fourth principle (juridical persons are never anonymous) implies that the network should be permissioned. It is a popular (but wrong) opinion that permissioning and decentralization are opposite things, and that the only way to 



== The architecture of the {tn}

The {tn} uses an EEA (Enterprise Ethereum Alliance) client called Consensys Quorum. As the interoperability specifications in the EEA matures, it is anticipated that other implementations of the EEA specs will be used simultaneously in the network, in the short term Hyperledger Besu and later other implementations.

The description of the architecture is highly independent of the specific type of client used, so we will use the name Quorum only when some specif feature of the Consensys Quorum implementation is used.

=== The transaction execution model

==== The Ethereum transaction execution model (non-BFT)

In general, in Public-Permissionless networks like Bitcoin or Ethereum there are essentially two mechanisms which are used to achieve the Safety property:

1. There is a consensus algorithm that makes sure that all nodes *agree on the same order* of the transactions that are injected into the network.

2. All transactions are *validated and executed* in all participant nodes in a deterministic way.

For Ethereum and its permissioned variants, the transaction lifecycle is similar, from the moment the transactions are injected into the network until they are registered by all the participating nodes and the state is updated in each of them. This is in contrast to other permissioned systems like Fabric or Corda, which use a different transaction execution model.

In Ethereum the generic transaction execution model is the following:

1. *Dissemination phase*: the client applications (in general external to the blockchain) inject transactions using the APIs provided by the different nodes participating in the network (normally via the JSON-RPC mechanism provided by Geth).
+
The transactions are not yet executed in the node where they have been injected, but they are disseminated to all nodes in the network in a “best effort” mode using the P2P (peer-to-peer) transport mechanism. In general, given the size of the network, there is not direct communication among all nodes in the network, so information has to be disseminated using so called “epidemic” protocols. That is, there is not guarantee that at a given moment all the nodes have received the same transactions, but there is a big probability that at a given moment all nodes share a big subset of the total number of transactions that have been injected in the past.
+
At this stage, the transactions disseminated in the network using the P2P protocol are stored in each of the participant nodes in a special queue named “transaction pool”. Please note that in general, each node has received the transactions in different order, due to indirect communications among nodes and heterogeneous propagation delays across the network.

2. *Ordering of transactions and creation of the block*: Ethereum uses a system which we could define as a “__cryptographic lottery__” (PoW), where the winner decides the order of transactions in the next block. Basically, the winner node selects and orders the transactions that it wants from its transaction pool (in general the criteria is to maximize its benefits, given the rewards provided by the system); executes the transactions in the selected order; and includes them in a new block. Via the P2P transport mechanism, the new block is disseminated to the rest of the network.

3. *Validation and execution of the transactions in all nodes and update of the global state*: each node that receives the new block performs some validations and if successful all of the transactions are executed exactly in the order specified in the block. The transactions are executed in a deterministic virtual machine (the EVM), which is what guarantees that the resulting state is the same in all nodes that execute independently the transactions in the same block, given the condition that all nodes start from the same state.

The model described above can in general be called “*Order-Validate-Execute*” (abbreviated OVE), because practically all Ethereum variants have in common that the transactions are Ordered (by the miner in PoW) before the rest of the nodes Validate and Execute them.

Please note that the essential *mission of the miner is ordering* the transactions. The regular nodes (those that do not mine) do not have to trust the miner and so *they validate and execute the transactions themselves*. In addition, all transactions in the block received from the network have to be also in the transaction pool of each node.

==== The transaction execution model with BFT ({tn})

If the consensus algorithm is a PBFT variant (like IBFT), the overall transaction lifecycle is mostly the same, with two modifications in step 2:

- The node that creates the block (referred normally as the leader) is selected among a set of perfectly identified nodes called Consensus nodes. There may be several strategies for selecting and rotating the leader among the consensus nodes, but the one used in {tn} is round-robin where a new leader is chosen for each new block. In this way, all consensus nodes participate eventually in the selection of transactions that go into new blocks, reducing the probability of censorship.

- The leader proposes a block to the other consensus nodes, and those perform voting on the block using a BFT algorithm that reaches agreement even if they do not trust to each other individually.


=== The different types of nodes in the network

---
image::RedTArchitecture.png[]
---

In the {tn} there are basically three types of nodes, depending on their role on the network:

Validator:: The validating nodes execute the consensus algorithm, which in the case of this {tn} is the IBFT.

Permissioner:: Are nodes whose physical addresses ("enodes") are perfectly known throughout the network. The network nodes only know the bootnodes that they have in their permitting file. Through a bootnode, the nodes of the network cannot know more nodes.

Regular:: A node that participates by replicating the blockchain, accepting the blocks generated by the validators and executing the transactions included in them. They are also allowed to inject transactions into the Network from sources external to the blockchain.

==== Validator node

The {tn} Validator nodes execute the Quorum IBFT consensus algorithm. Given the criticality of these nodes in the proper functioning of the network, it has been determined that the Validator nodes are dedicated exclusively to the execution of the consensus algorithm and it is not allowed its use for other functions. Specifically, the entity that operates a Validator node will not be able to use it to deploy contracts, initiate transactions or query the blockchain.

In other words, Validator nodes must not have any type of connectivity with enterprise applications, run software other than that of the validator node, or share resources with other corporate functions. The software  that is executed by the Validator nodes is the one specified  and recommended by these technical policies. The Validator nodes undertake not to alter or modify the recommended software without the knowledge of the Association's technical team and the other critical node operator Associates. Any modification of the indicated software will be made under the exclusive responsibility of the critical node manager, without in any case being able to compromise the operation or security of the Network.

Validator nodes can only be connected to other Validator nodes and one or more Permissioning nodes. In other words, the Validator nodes will be configured so that they do not accept connections from any Regular node, via the Quorum permissioning mechanism. In this way, the number of connections of a Validator node with other nodes is limited, independent of the size of the network and, in this way, the technical requirements can be managed for the execution of the consensus algorithm as well as the security measures to implement in the node.

==== Permissioning node

A Permissioning node is a node that executes the Quorum bootnode function, but which also has other functions and restrictions in terms of connectivity with other nodes on the network.

The Permissioning List of each one of the Permissioning nodes will contain, in addition to the list of Validator nodes, the list of the Regular nodes that have been accepted in the network.
In this way, the Permissioning nodes will connect on one hand with the Validator nodes and on the other with the Regular nodes, isolating the Validator nodes from the management of permissioning and from the connections with the Regular nodes.

The enode addresses of the Permissioning nodes will be public and well known, so that the Regular nodes can initially connect to the network.

The benefits obtained with this configuration are the following:

- The resources necessary for network connectivity of the Validator nodes are kept constant, being able to dedicate all the resources of the machines to the execution of the IBFT consensus algorithm, regardless of the number of Regular nodes of the network.

- The configuration changes of the Validating Nodes are reduced to the minimum necessary, and are always related to the execution of the consensus algorithm. Specifically, it is not necessary to update the permitting list in these nodes, even if the Regular Nodes change. A reduction of the necessary changes in the Validator Nodes results in greater stability of these nodes. An update to the permitting file may be required in the event that a new validator is added to the IBFT consensus which has been allowed later than the last update of the permitting file.

- By reducing the exposure of the Validating Nodes to the rest of the Network, the technical implementation of the security and bastion policies of the Validating Nodes described in the corresponding section of this document is more efficient.

==== Regular node

Regular nodes are those that allow entities to participate in the network by deploying contracts, initiating transactions, executing Smart Contracts and querying the blockchain.

The Regular nodes are typically connected to the enterprise applications of the entities that operate them and have no other technical restrictions than those dictated by the internal policies of each of the entities that own and manage them.


== The {tn} and the Public-Permissioned Manifesto

=== Permissioning

==== Policy

As mentioned before, the {tn} is a Public-Permissioned network. In such a network all nodes that can inject transactions into the network have to be permissioned. In principle, nodes that are read-only (just query the blockchain and do not inject transactions) do not need permissioning. However, due to current technical limitations of the permissioning mechanism, the {tn} requires all participating nodes to be permissioned. In the future, this restriction will be raised as soon as it is possible to connect anonymous read-only nodes.

The implications derived from the above are:

1. There can be no “anonymous” nodes, even if they are read-only (they limit themselves to queries even if the system can not limit writes).

2. If an entity allows blockchain access (both read and write) to other entities through the node that the entity operates, the entity is responsible for all the actions that are carried out through its node in the blockchain, with the implications that derive from it.

3. Currently the permissioning is at node level and not at entity level. In other words, an entity can have more than one node, and each node has to be permissioned explicitly independently. In the future this restriction will be raised with a more sophisticated permissioning system.

==== Implementation

The current permissioning process in the {tn} is yet in the initial steps towadrs a fully automated decentralized permissioning system. However, it is already fully transparent and auditable.

It consists of the following steps:

1. The entity requesting permissioning of a node sends the request via a pull request in the Alastria Github repository. The request is public (anybody can see all the data), and the administrators of the Alastria repository can not deny that the request was made, or change unilaterally the data.

2. In parallel, a request is also sent to the Alastria association (via a special tool configured to that effect). The objective of this request is to verify that the requesting entity meets the prerequisites required: being a member of the association, without any type of administrative or legal problem.

3. Once the Alastria association confirms membership, the entities operating the Permissioning nodes update the configuration files with the new node information. The new node can interact with the network as soon as the first Permissioning node updates the permissioning list in its configuration.

==== Some considerations

1. Any entity which is a member of the Alastria association can have a node in the {tn}, assuming that the node complies with the technical and operational specifications detailed below in this document.

2. In order to be part of the network, the existing members of the network assume voluntarily that any new entity has to be a member of the Alastria association.

3. The entities operating the {tn} do not put any restrictions to a new entity apart from being a member of the Alastria association and that the new node has to comply with the technical and operational specifications.

=== De-permissioning

It may be necessary to de-permission, disable, disallow, revoke or terminate the validity of the authorization or permission of one node that is participating in the {tn}. The causes may be voluntary or involuntary.

Voluntary:: they take effect at the request of the entity operating the node in question (for example, the member withdraws voluntarily from Alastria). In the event that a member of wants to de-permit a node, it must notify it at least 15 business days before the date of its effectiveness.

Involuntary:: they take effect at the request of Alastria. There are two possibilities in this case: 1) An Alastria member breaches the obligations inherent in the condition of member of Alastria (for example, at an administrative level such as non-payment of a fee). 2) The other members of the network request from Alastria as a neutral arbitration entity, the decision to de-permission a node, for example as non-compliance with the rules and policies of use of the Network.


== Robustnes, resiliency, trustedness and the SLA of the network

=== The blockchain network as a BART infrastructure

.From <<AiyerEtAl2005>>:
[quote]
____
{3dots} a general approach to constructing cooperative services that span multiple administrative domains (MADs). In a cooperative service, *nodes collaborate to provide some service that benefits each node, but there is no central authority that controls the nodes’ actions*. Examples of such services include Internet routing, wireless mesh routing, file distribution, archival storage, or cooperative backup. As MAD distributed systems become more commonplace, developing a solid foundation for constructing this class of services becomes increasingly important.

{3dots}

In these systems, the classical dichotomy between correct and faulty nodes becomes inadequate. Nodes in MAD systems may depart from protocols for two distinct reasons. First, as in traditional systems, nodes may be broken and arbitrarily deviate from a protocol because of component failure, misconfiguration, security compromise, or malicious intent. Second, nodes may be selfish and alter the protocol in order to increase their utility. Byzantine Fault Tolerance (BFT) handles the first class of deviations well.
____




=== The difference between CFT and BFT

=== Diversity as a critical factor of resiliency

=== Participatory BFT: the basketball participatory model

=== The whole is bigger than the sum of the parts: Estimating resiliency

=== The role of transparency in resiliency

Minimize the "Price of Anarchy" <<Roughgarden2015>>

=== Accountability

<<DiarraEtAl2014>>

=== The limited power of malicious actors in {tn}

We now analyze some properties of a permissioned BFT Ethereum network in the presence of malicious actors. We are especially interested in the behaviour when most consensus nodes are malicious.

PROPERTY 1: The consensus nodes can not modify transactions, even if all consensus nodes are malicious and collude::
All transactions are digitally signed by the entity creating the transaction and the network is permissioned, so all identities are well-known. As mentioned in the description of the transaction lifecycle, the honest Regular nodes do not trust the node that generates the block. The role of the Validator nodes is just ordering the transactions included in a block so all the nodes in the network agree on the order of execution of the transactions. All the Regular nodes validate and execute all transactions included in the block received from the Validators. This means that all Regular nodes will detect and reject any transactions that have been modified.

PROPERTY 2: The consensus nodes can not include in the block fake transactions, even if all consensus nodes are malicious and collude::
As mentioned before, the honest Regular nodes do not trust the node that generates the block. As described in step 2 of the transaction lifecycle, the Regular nodes always check that the transactions included in the block received from the Validators exist also in the transaction pool of the Regular node. The transactions in the transaction pool are received during the dissemination phase of the transaction execution, before the consensus algorithm is executed by the Validator nodes.
+
This means that in order to have a block that will be accepted by all honest Regular nodes, all transactions listed in the block have to be injected and disseminated in the usual way, so the malicious consensus nodes have to follow the same rules as the rest of the network. The Validator nodes can not gain any advantage from the fact that they are Validators, and all transactions have to be created in the same way and all entities creating transasctions are subject to the same legal responsibilities.

PROPERTY 3: Transactions can be censored in the long term, but this can be detected and eventually resolved::
When all miners are malicious and collude, they can censor a transaction from being included in any new block. But a regular node can monitor its transaction pool and detect transactions that are never included in any block. Even more powerful, some regular nodes can collaborate by sharing this information and detecting such anomalous behaviour faster and more reliably.
In a Public-Permissioned network like Alastria, the consensus nodes are perfectly identified, and the regular nodes can bring this information to the governance bodies of the association to restore the proper functioning of the network. In extreme cases, they can also take legal actions against the consensus nodes, which can not deny the proofs.

PROPERTY 4: Regular nodes can avoid completely temporary forks and reorgs of the canonical chain::
In Ethereum with PoW, the miner selection is probabilistic, so there may be almost simultaneous winners, each creating its own block and disseminating it to the network. There are temporary forks in the network, which are eventually solved when the “longest chain wins” rule is applied (in reality it is a little more complex than this, but the concept is essentially the same). All nodes that were following the losing chain suffer a reorg in their canonical chain and all transactions included in the losing fork disappear.
+
In Ethereum with BFT, receiving a block with a block number that already exists in the local copy of the canonical chain is a protocol violation (assuming the blocks are different). Even if all consensus nodes are malicious and collude, a honest regular node can easily check the new block and accept it only if the block number is one more than the current latest block in the local canonical chain.
+
This implies that, contrary to what happens with PoW, a blockchain using BFT can implement mechanisms beyond the general consensus algorithm and enforce the “append-only” semantics even in the case where the consensus algorithm does not provide any guarantees about correctness of the blocks generated.
Even more, any honest regular node receiving a block with a block number that already exists in its local copy of the canonical chain should report this event to the governance bodies of the network to take appropriate measures. The block is digitally signed by the public identities of the consensus nodes that produced the seal of the block, so they can not deny the proof, even if it is a single node detecting the protocol violation.

PROPERTY 5: The history of the blockchain can not be rewritten, even if all consensus nodes are malicious and collude::
This follows from the property above. In Ethereum with BFT, a honest regular node will reject any block that already exists in its local copy of the canonical chain.

== Sustainability of the network

<<AiyerEtAl2005>>
<<Lev-AriEtAl2019>>
<<Amoussou-Guenou>>

== Conclusion

== Glossary

[bibliography]
== References

//JRMBIB-BEGIN
- [[[Ostrom1990]]] E. Ostrom, Governing the Commons: The Evolution of Institutions for Collective Action. Cambridge University Press, 1990.
- [[[AiyerEtAl2005]]] A. S. Aiyer, L. Alvisi, A. Clement, M. Dahlin, J.-P. Martin, and C. Porth, “BAR Fault Tolerance for Cooperative Services,” p. 14, 2005.
- [[[Roughgarden2015]]] T. Roughgarden, “Intrinsic Robustness of the Price of Anarchy,” J. ACM, vol. 62, no. 5, p. 32:1–32:42, Nov. 2015, doi: 10.1145/2806883.
- [[[DiarraEtAl2014]]] A. Diarra, S. B. Mokhtar, P. Aublin, and V. Quéma, “FullReview: Practical Accountability in Presence of Selfish Nodes,” in 2014 IEEE 33rd International Symposium on Reliable Distributed Systems, Oct. 2014, pp. 271–280, doi: 10.1109/SRDS.2014.32.
- [[[Lev-AriEtAl2019]]] K. Lev-Ari, A. Spiegelman, I. Keidar, and D. Malkhi, “FairLedger: A Fair Blockchain Protocol for Financial Institutions,” p. 16, 2019.
- [[[Amoussou-Guenou]]] Y. Amoussou-Guenou, “On Fairness in Committee-based Blockchains,” p. 18.
//JRMBIB-END














